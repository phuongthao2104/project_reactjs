'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function useLocalStorage(key, initialValue) {
  var _useState = React.useState(function () {
    try {
      var item = typeof window !== 'undefined' && window.localStorage.getItem(key);
      return item ? item : initialValue;
    } catch (error) {
      return initialValue;
    }
  }),
      _useState2 = _slicedToArray(_useState, 2),
      storedValue = _useState2[0],
      setStoredValue = _useState2[1];

  var setValue = function setValue(value) {
    try {
      var valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, valueToStore);
    } catch (error) {
      console.log(error);
    }
  };

  return [storedValue, setValue];
}

var SET_ITEMS = "SET_ITEMS";
var ADD_ITEM = "ADD_ITEM";
var UPDATE_ITEM = "UPDATE_ITEM";
var REMOVE_ITEM = "REMOVE_ITEM";
var EMPTY_CART = "EMPTY_CART";
var CartContext = React.createContext();
var initialState = {
  items: [],
  totalItems: 0,
  totalUniqueItems: 0,
  isEmpty: true
};
var useCart = function useCart() {
  return React.useContext(CartContext);
};

function reducer(state, action) {
  switch (action.type) {
    case SET_ITEMS:
      return generateCartState(state, action.payload);

    case ADD_ITEM:
      {
        var items = [].concat(_toConsumableArray(state.items), [action.payload]);
        return generateCartState(state, items);
      }

    case UPDATE_ITEM:
      {
        var _items = state.items.map(function (item) {
          if (item.id !== action.id) return item;
          return _objectSpread2(_objectSpread2({}, item), action.payload);
        });

        return generateCartState(state, _items);
      }

    case REMOVE_ITEM:
      {
        var _items2 = state.items.filter(function (i) {
          return i.id !== action.id;
        });

        return generateCartState(state, _items2);
      }

    case EMPTY_CART:
      return initialState;

    default:
      throw new Error("No action specified");
  }
}

var generateCartState = function generateCartState() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var totalUniqueItems = calculateUniqueItems(items);
  var isEmpty = totalUniqueItems === 0;
  return _objectSpread2(_objectSpread2(_objectSpread2({}, initialState), state), {}, {
    items: calculateItemTotals(items),
    totalItems: calculateTotalItems(items),
    totalUniqueItems: totalUniqueItems,
    cartTotal: calculateCartTotal(items),
    isEmpty: isEmpty
  });
};

var calculateItemTotals = function calculateItemTotals() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return items.map(function (item) {
    return _objectSpread2({
      itemTotal: item.price * item.quantity
    }, item);
  });
};

var calculateCartTotal = function calculateCartTotal() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return items.reduce(function (total, item) {
    return total + item.quantity * item.price;
  }, 0);
};

var calculateTotalItems = function calculateTotalItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return items.reduce(function (sum, item) {
    return sum + item.quantity;
  }, 0);
};

var calculateUniqueItems = function calculateUniqueItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return items.length;
};

function CartProvider(_ref) {
  var children = _ref.children,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? _toConsumableArray(Array(12)).map(function (i) {
    return (~~(Math.random() * 36)).toString(36);
  }).join("") : _ref$id,
      _ref$defaultItems = _ref.defaultItems,
      defaultItems = _ref$defaultItems === void 0 ? [] : _ref$defaultItems,
      onSetItems = _ref.onSetItems,
      onItemAdd = _ref.onItemAdd,
      onItemUpdate = _ref.onItemUpdate,
      onItemRemove = _ref.onItemRemove;

  var _useLocalStorage = useLocalStorage("react-use-cart", JSON.stringify(_objectSpread2(_objectSpread2({
    id: id
  }, initialState), {}, {
    items: defaultItems
  }))),
      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),
      savedCart = _useLocalStorage2[0],
      saveCart = _useLocalStorage2[1];

  var _useReducer = React.useReducer(reducer, JSON.parse(savedCart)),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  React.useEffect(function () {
    saveCart(JSON.stringify(state));
  }, [state, saveCart]);

  var setItems = function setItems(items) {
    dispatch({
      type: SET_ITEMS,
      payload: items
    });
    onSetItems && onSetItems(items);
  };

  var addItem = function addItem(item) {
    var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    if (quantity <= 0) return;
    if (!item.id) throw new Error("You must provide an `id` for items");
    var currentItem = state.items.find(function (i) {
      return i.id === item.id;
    });
    if (!currentItem & !item.price) throw new Error("You must pass a `price` for new items");

    if (!currentItem) {
      var _payload = _objectSpread2(_objectSpread2({}, item), {}, {
        quantity: quantity
      });

      onItemAdd && onItemAdd(_payload);
      return dispatch({
        type: ADD_ITEM,
        payload: _payload
      });
    }

    var payload = _objectSpread2(_objectSpread2({}, item), {}, {
      quantity: currentItem.quantity + quantity
    });

    dispatch({
      type: UPDATE_ITEM,
      id: item.id,
      payload: payload
    });
    onItemUpdate && onItemUpdate(payload);
  };

  var updateItem = function updateItem(id, payload) {
    dispatch({
      type: UPDATE_ITEM,
      id: id,
      payload: payload
    });
    onItemUpdate && onItemUpdate(payload);
  };

  var updateItemQuantity = function updateItemQuantity(id, quantity) {
    if (quantity <= 0) {
      onItemRemove && onItemRemove(id);
      return dispatch({
        type: REMOVE_ITEM,
        id: id
      });
    }

    var currentItem = state.items.find(function (item) {
      return item.id === id;
    });
    if (!currentItem) throw new Error("No such item to update");

    var payload = _objectSpread2(_objectSpread2({}, currentItem), {}, {
      quantity: quantity
    });

    dispatch({
      type: UPDATE_ITEM,
      id: id,
      payload: payload
    });
    onItemUpdate && onItemUpdate(payload);
  };

  var removeItem = function removeItem(id) {
    dispatch({
      type: REMOVE_ITEM,
      id: id
    });
    onItemRemove && onItemRemove(id);
  };

  var emptyCart = function emptyCart() {
    return dispatch({
      type: EMPTY_CART
    });
  };

  var getItem = function getItem(id) {
    return state.items.find(function (i) {
      return i.id === id;
    });
  };

  var inCart = function inCart(id) {
    return state.items.some(function (i) {
      return i.id === id;
    });
  };

  return /*#__PURE__*/React__default.createElement(CartContext.Provider, {
    value: _objectSpread2(_objectSpread2({}, state), {}, {
      getItem: getItem,
      inCart: inCart,
      setItems: setItems,
      addItem: addItem,
      updateItem: updateItem,
      updateItemQuantity: updateItemQuantity,
      removeItem: removeItem,
      emptyCart: emptyCart
    })
  }, children);
}

exports.CartProvider = CartProvider;
exports.initialState = initialState;
exports.useCart = useCart;
//# sourceMappingURL=react-use-cart.cjs.js.map
